//! # spirv-bindgen
//! Library to generate Rust bindings for Spir-V shaders.
//!

mod c_struct;
mod debug;
mod descriptors;
mod entry_points;
mod model;
mod push_constants;
mod specialization_constants;

use entry_points::EntryPoints;
use prettyplease::unparse;
use proc_macro2::TokenStream;
use quote::{ToTokens, quote};
use rspirv_reflect::Reflection;
use specialization_constants::SpecializationConstants;

/// A parsed Spir-V document to generate bindings from.
pub struct Spirv {
    /// The shader's specialization constants.
    pub specialization_constants: Option<SpecializationConstants>,

    /// The shader's entry points.
    pub entry_points: EntryPoints,
}

impl Spirv {
    /// Load a Spir-V document from it's bytes.
    pub fn try_from_bytes(bytes: &[u8]) -> Self {
        let spirv = Reflection::new_from_spirv(bytes).unwrap();

        let specialization_constants = SpecializationConstants::new(&spirv);
        let entry_points = EntryPoints::new(&spirv);

        Self {
            specialization_constants,
            entry_points,
        }
    }

    /// Print the generated bindings as a pretty string.
    pub fn pretty_string(&self) -> String {
        let file = syn::parse2(self.to_token_stream()).unwrap();
        unparse(&file)
    }
}

impl ToTokens for Spirv {
    fn to_tokens(&self, tokens: &mut TokenStream) {
        let specialization_constant = &self.specialization_constants;
        let entry_points = &self.entry_points;

        let new_tokens = quote! {
            //! Generated by spriv-bindgen
            //!

            #specialization_constant
            #entry_points
        };

        tokens.extend(new_tokens);
    }
}
